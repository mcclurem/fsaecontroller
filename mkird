#!/bin/bash
# Partly courtesy of http://www.ibm.com/developerworks/linux/library/l-initrd.html

while [ $# -gt 0 ]; do
	case $1 in
		--usage)
			echo "mkird [statically linked program] ..."
			shift
			;;
		*)
			if [ -x $1 ]; then
					if [ $(file $1|grep -c "statically linked") != 0 ]; then
						EXECUTABLES="$EXECUTEABLES $1"
				else
						echo "$1 doesn't seem to be a statically linked binary and so it will break the initrd image... not including it"
				fi
			else
				echo "$1 does not seem to exist or is not executable... Please check your arguments"
				exit 1
			fi
			shift
			;;
	esac
done

echo $EXECUTABLES

if [ $(whoami) != root ]; then
	echo "You need to be root to run this"
	exit 0
fi

# Housekeeping...
rm -f /tmp/ramdisk.img
rm -f /tmp/ramdisk.img.gz

# Ramdisk Constants - These MUST match kernel params in order to boot
RDSIZE=$(grep "CONFIG_BLK_DEV_RAM_SIZE" /usr/src/linux/.config |grep -o -E "[0-9]+")
BLKSIZE=1024
ROOTDEV=$(awk '/^[ \t]*[^#]/ { if ($2 == "/") { print $1; }}' /etc/fstab | cut -d/ -f3)

if [ ! -d /boot/grub ]; then
		echo "Mounting Boot..."
		mount /boot
fi

# Create an empty ramdisk image
dd if=/dev/zero of=/tmp/ramdisk.img bs=$BLKSIZE count=$RDSIZE

# Make it an ext2 mountable file system
/sbin/mke2fs -F -m 0 -b $BLKSIZE /tmp/ramdisk.img $RDSIZE

# Mount it so that we can populate
mount /tmp/ramdisk.img /mnt/initrd -t ext2 -o loop=/dev/loop0

# Populate the filesystem (subdirectories)
mkdir /mnt/initrd/bin
mkdir /mnt/initrd/sys
mkdir /mnt/initrd/dev
mkdir /mnt/initrd/proc
mkdir /mnt/initrd/lib
mkdir /mnt/initrd/new_root

#Copy in all the binaries you want to run
for BINARY in $EXECUTABLES
do
	strip $BINARY
	cp $BINARY /mnt/initrd/bin
	chmod +x /mnt/initrd/bin
done

# Grab busybox and create the symbolic links
cp ./busybox-1.13.2/busybox /mnt/initrd/bin
cd /mnt/initrd/bin

ln -s busybox ash
ln -s busybox mount
ln -s busybox mkdir
ln -s busybox echo
ln -s busybox ls
ln -s busybox cat
ln -s busybox ps
ln -s busybox dmesg
ln -s busybox sysctl
ln -s busybox pivot_root

cd

# Grab the necessary dev files
cp -a /dev/console /mnt/initrd/dev
cp -a /dev/ramdisk /mnt/initrd/dev
cp -a /dev/ram0 /mnt/initrd/dev
cp -a /dev/null /mnt/initrd/dev
cp -a /dev/tty1 /mnt/initrd/dev
cp -a /dev/tty2 /mnt/initrd/dev
cp -a /dev/$ROOTDEV /mnt/initrd/dev

# Equate sbin with bin
cd /mnt/initrd
ln -s bin sbin
cd 

# Create the init file
cat >> /mnt/initrd/linuxrc << EOF
#!/bin/ash
echo
echo "Simple initrd is active"
echo
mount -t proc /proc /proc
mount -t sysfs none /sys
/bin/modeselect
if [ $? == 0 ]; then
EOF
for BINARY in $EXECUTABLES
do
	echo "/bin/$BINARY" >> /mnt/initrd/linuxrc
done
cat >> /mnt/initrd/linuxrc << EOF
else
	/bin/autobuild
fi
mount /dev/$ROOTDEV /new_root
cd /new_root
echo 0x0100 >/proc/sys/kernel/real-root-dev
pivot_root . ./mnt/initrd
umount /mnt/initrd/proc
#/bin/bash --login
exec chroot . /sbin/init </dev/console >/dev/console 2>&1
EOF

chmod +x /mnt/initrd/linuxrc

echo "The image is $(df |grep initrd| awk '{print $5}') full"


# Finish up...
umount /mnt/initrd
gzip -9 /tmp/ramdisk.img
cp /tmp/ramdisk.img.gz /boot/ramdisk.img.gz
